// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  mem_id       Int    @id @default(autoincrement())
  mem_name     String
  mem_phone    String
  mem_email    String @unique
  mem_password String

  membership Membership[]
  issuances  Issuance[]
}

model Membership {
  membership_id Int    @id @default(autoincrement())
  member_id     Int
  status        String

  // Relationship

  member Member @relation(fields: [member_id], references: [mem_id])
}

model Collection {
  collection_id   Int    @id @default(autoincrement())
  collection_name String

  //Relationship

  books Book[]
}

model Book {
  book_id            Int      @id @default(autoincrement())
  book_name          String
  book_cat_id        Int
  book_collection_id Int
  book_launch_date   DateTime
  book_publisher     String

  collections Collection @relation(fields: [book_collection_id], references: [collection_id])
  categorys   Category   @relation(fields: [book_cat_id], references: [cat_id])

  issuances Issuance[]
}

model Category {
  cat_id       Int    @id @default(autoincrement())
  cat_name     String
  sub_cat_name String

  books Book[]
}

model Issuance {
  issuance_id        Int      @id @default(autoincrement())
  book_id            Int
  issuance_date      DateTime @default(now())
  issuance_member    Int
  issued_by          String
  target_return_date DateTime @default(dbgenerated("(CURRENT_TIMESTAMP + interval '7 days')"))
  issuance_status    String

  books   Book   @relation(fields: [book_id], references: [book_id])
  members Member @relation(fields: [issuance_member], references: [mem_id])
}
